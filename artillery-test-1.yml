# Artillery READ-ONLY Performance Test for Example API
# 실행 명령어: artillery run --output artillery-test-1.html artillery-test-1.yml --record --key a9_k86i2s5vb8zd562mov854i1sdiwaofap

config:
  target: 'http://localhost:3000'
  # 안전한 읽기 전용 성능 테스트 시나리오
  phases:
    # 워밍업 단계 - JIT 컴파일러 최적화
    - name: "warmup"
      duration: 60
      arrivalRate: 10
      rampTo: 50
    # 점진적 부하 증가 - 실제 트래픽 시뮬레이션
    - name: "ramp-up"
      duration: 120
      arrivalRate: 50
      rampTo: 200
    # 고부하 테스트 - 시스템 한계 확인
    - name: "high-load"
      duration: 180
      arrivalRate: 200
      rampTo: 500
    # 최대 부하 테스트 - 극한 상황
    - name: "peak-load"
      duration: 60
      arrivalRate: 500
      rampTo: 800
    # 안정화 단계 - 부하 감소
    - name: "stabilization"
      duration: 90
      arrivalRate: 800
      rampTo: 50
  
  # 성능 메트릭 설정
  metrics:
    - name: "response_time_95th"
      summary: "95th percentile response time"
    - name: "error_rate"
      summary: "Error rate percentage"
    
  # 환경별 변수
  variables:
    userAgent: "Artillery-LoadTest/1.0"
    contentType: "application/json"

# 플러그인 설정
plugins:
  # 메트릭 수집 플러그인
  metrics-by-endpoint:
    useOnlyRequestNames: true
  # 예상 성능 검증
  expect:
    outputFormat: json
    
# 시나리오 정의
scenarios:
  # CRUD vs 일반 라우터 성능 비교 시나리오 (40% 비중)
  - name: "crud_vs_normal_comparison"
    weight: 40
    flow:
      # 일반 라우터 헬스체크 (DB 요청 없음)
      - get:
          url: "/example/example-normal"
          name: "normal_router_health"
          expect:
            - statusCode: 200
      
      # CRUD 라우터 헬스체크 (오버헤드 있음)
      - get:
          url: "/example"
          name: "crud_router_health"
          expect:
            - statusCode: 200
            - hasProperty: "data"
      
      # 처리 시간 차이 측정을 위한 반복 테스트
      - get:
          url: "/example/example-normal"
          name: "normal_router_test_1"
          expect:
            - statusCode: 200
      - get:
          url: "/example"
          name: "crud_router_test_1"
          expect:
            - statusCode: 200
      - get:
          url: "/example/example-normal"
          name: "normal_router_test_2"
          expect:
            - statusCode: 200
      - get:
          url: "/example"
          name: "crud_router_test_2"
          expect:
            - statusCode: 200
      - get:
          url: "/example/example-normal"
          name: "normal_router_test_3"
          expect:
            - statusCode: 200
      - get:
          url: "/example"
          name: "crud_router_test_3"
          expect:
            - statusCode: 200

  # CRUD 읽기 전용 성능 테스트 (45% 비중)
  - name: "crud_read_performance"
    weight: 45
    flow:
      # 기본 목록 조회
      - get:
          url: "/example"
          name: "list_all_users"
          expect:
            - statusCode: 200
            - hasProperty: "data"
      
      # 페이징 테스트 - 다양한 페이지 크기
      - get:
          url: "/example?page[number]=1&page[size]=10"
          name: "paginated_small"
          expect:
            - statusCode: 200
            - hasProperty: "data"
            - hasProperty: "meta.pagination"
      
      - get:
          url: "/example?page[number]=2&page[size]=25"
          name: "paginated_medium"
          expect:
            - statusCode: 200
            - hasProperty: "meta.pagination"
      
      - get:
          url: "/example?page[number]=1&page[size]=50"
          name: "paginated_large"
          expect:
            - statusCode: 200
      
      # 필터링 성능 테스트
      - get:
          url: "/example?filter[name]=김철수"
          name: "filter_by_name"
          expect:
            - statusCode: 200
      
      - get:
          url: "/example?filter[age]=gte:25"
          name: "filter_by_age_range"
          expect:
            - statusCode: 200
      
      # 정렬 성능 테스트
      - get:
          url: "/example?sort=name&page[size]=20"
          name: "sort_by_name"
          expect:
            - statusCode: 200
      
      - get:
          url: "/example?sort=-createdAt&page[size]=20"
          name: "sort_by_date_desc"
          expect:
            - statusCode: 200
      
      # 복합 쿼리 성능 테스트
      - get:
          url: "/example?filter[age]=gte:20&sort=name&page[number]=1&page[size]=15"
          name: "complex_query"
          expect:
            - statusCode: 200

  # 고부하 읽기 시나리오 (15% 비중)
  - name: "high_load_read_scenario"
    weight: 15
    flow:
      # 대량 조회 테스트
      - get:
          url: "/example?page[size]=100"
          name: "bulk_read_100"
          expect:
            - statusCode: 200
            - contentType: json
      
      # 검색 성능 테스트
      - get:
          url: "/example?search=김철수&page[size]=30"
          name: "search_performance"
          expect:
            - statusCode: 200
      
      # 복잡한 필터링 조합
      - get:
          url: "/example?filter[age]=between:20,40&filter[name]=like:%김철수%&sort=-createdAt&page[size]=25"
          name: "complex_filtering"
          expect:
            - statusCode: 200
      
      # 최대 페이지 크기 테스트
      - get:
          url: "/example?page[size]=200&sort=uuid"
          name: "max_page_size"
          expect:
            - statusCode: 200