name: Auto Release Framework

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  auto-release:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Install GitHub Copilot CLI
      run: |
        # GitHub CLI Copilot 확장 설치
        gh extension install github/gh-copilot || echo "Copilot extension already installed or failed to install"
        
        # 설치 확인
        if gh copilot --help >/dev/null 2>&1; then
          echo "✅ GitHub Copilot CLI successfully installed"
        else
          echo "❌ GitHub Copilot CLI installation failed"
        fi
    
    - name: Get current version
      id: version_info
      run: |
        # 현재 버전 읽기 (증가시키지 않음)
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        echo "package_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
    
    - name: Generate version tag
      id: version
      run: |
        # 현재 버전 사용 (증가시키지 않음)
        PACKAGE_VERSION="${{ steps.version_info.outputs.package_version }}"
        
        # 현재 날짜와 시간을 버전에 추가
        TIMESTAMP=$(date +"%Y.%m.%d-%H%M")
        
        # 태그 생성 (framework-v{package_version}-{timestamp})
        TAG_NAME="framework-v${PACKAGE_VERSION}-${TIMESTAMP}"
        
        echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
        echo "package_version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        
        echo "Generated tag: ${TAG_NAME}"
    
    - name: Generate update package
      run: |
        echo "Generating framework update package..."
        npm run updater:generate
    
    - name: Find generated package
      id: package
      run: |
        # 가장 최근에 생성된 패키지 파일 찾기
        PACKAGE_FILE=$(ls -t updater/packages/update-package-*.zip | head -1)
        
        if [ -z "$PACKAGE_FILE" ] || [ ! -f "$PACKAGE_FILE" ]; then
          echo "No package file found!"
          exit 1
        fi
        
        echo "package_file=${PACKAGE_FILE}" >> $GITHUB_OUTPUT
        echo "Found package: ${PACKAGE_FILE}"
        
        # 파일 크기 확인 (Linux 환경)
        FILE_SIZE=$(stat -c%s "$PACKAGE_FILE")
        FILE_SIZE_MB=$(awk "BEGIN {printf \"%.2f\", $FILE_SIZE/1024/1024}")
        echo "package_size=${FILE_SIZE_MB}MB" >> $GITHUB_OUTPUT
    
    - name: Find generated map file
      id: mapfile
      run: |
        # 가장 최근에 생성된 맵 파일 찾기
        MAP_FILE=$(ls -t updater/map/v*.json | head -1)
        
        if [ -z "$MAP_FILE" ] || [ ! -f "$MAP_FILE" ]; then
          echo "No map file found!"
          exit 1
        fi
        
        echo "map_file=${MAP_FILE}" >> $GITHUB_OUTPUT
        echo "Found map: ${MAP_FILE}"
        
        # 맵 파일에서 파일 수 계산
        FILE_COUNT=$(jq 'length' "$MAP_FILE")
        echo "file_count=${FILE_COUNT}" >> $GITHUB_OUTPUT
    
    - name: Generate release notes with AI
      id: notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # 이전 릴리즈 태그 찾기
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep "framework-v" | head -1 || echo "")
        
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous release found, using initial commit"
          COMMIT_RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
        else
          echo "Previous release: $PREVIOUS_TAG"
          COMMIT_RANGE="${PREVIOUS_TAG}..HEAD"
        fi
        
        # 커밋 로그 가져오기
        COMMITS=$(git log --pretty=format:"- %s (%h)" $COMMIT_RANGE)
        
        # 변경된 파일 목록
        CHANGED_FILES=$(git diff --name-only $COMMIT_RANGE | head -10)
        
        # GitHub Copilot을 사용한 AI 요약 생성
        AI_SUMMARY=""
        if command -v gh copilot >/dev/null 2>&1; then
          echo "🤖 Generating AI summary with GitHub Copilot..."
          
          # Copilot CLI를 사용하여 요약 생성
          PROMPT="다음 Express.js Kusto 프레임워크 변경사항을 한국어로 요약해주세요: $COMMITS"
          AI_SUMMARY=$(echo "$PROMPT" | gh copilot suggest --type git 2>/dev/null | sed '/^$/d' | head -5 | tr '\n' ' ' || echo "")
          
          if [ -n "$AI_SUMMARY" ]; then
            echo "✅ AI summary generated successfully"
          else
            echo "⚠️ AI summary generation failed, using fallback"
            AI_SUMMARY="GitHub Copilot을 통한 자동 요약을 생성할 수 없었습니다. 아래 변경사항을 확인해주세요."
          fi
        else
          echo "❌ GitHub Copilot CLI not available"
          AI_SUMMARY="GitHub Copilot CLI가 설치되지 않았습니다."
        fi
        
        # 릴리즈 노트 생성
        {
          echo "# 🚀 Express.js Kusto Framework v${{ steps.version.outputs.package_version }}"
          echo ""
          echo "## 🤖 AI Generated Summary"
          echo "${AI_SUMMARY}"
          echo ""
          echo "## 📦 Package Information"
          echo "- **Framework Version**: v${{ steps.version.outputs.package_version }}"
          echo "- **Build Timestamp**: ${{ steps.version.outputs.timestamp }}"
          echo "- **Package Size**: ${{ steps.package.outputs.package_size }}"
          echo "- **Files Included**: ${{ steps.mapfile.outputs.file_count }} files"
          echo ""
          echo "## 📝 Recent Changes"
          if [ -n "$COMMITS" ]; then
            echo "$COMMITS"
          else
            echo "변경 사항이 없습니다."
          fi
          echo ""
          echo "## 🔧 Changed Files (Top 10)"
          echo '```'
          if [ -n "$CHANGED_FILES" ]; then
            echo "$CHANGED_FILES"
          else
            echo "변경된 파일이 없습니다."
          fi
          echo '```'
          echo ""
          echo "---"
          echo "**Generated on**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "**Commit**: ${{ github.sha }}"
          echo "**Workflow**: ${{ github.workflow }}"
        } > release_notes.md
        
        echo "✅ Release notes generated with AI assistance"
    
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # GitHub의 자동 릴리즈 노트 생성 기능 활용
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep "framework-v" | head -1 || echo "")
        
        # GitHub CLI를 사용하여 릴리즈 생성 (자동 릴리즈 노트 포함)
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Creating release with auto-generated notes from $PREVIOUS_TAG"
          gh release create "${{ steps.version.outputs.tag_name }}" \
            --title "🚀 Framework v${{ steps.version.outputs.package_version }} (${{ steps.version.outputs.timestamp }})" \
            --notes-file release_notes.md \
            --generate-notes \
            --notes-start-tag "$PREVIOUS_TAG" \
            --target main \
            "${{ steps.package.outputs.package_file }}#express-kusto-framework-v${{ steps.version.outputs.package_version }}-${{ steps.version.outputs.timestamp }}.zip" \
            "${{ steps.mapfile.outputs.map_file }}#file-map-v${{ steps.version.outputs.package_version }}-${{ steps.version.outputs.timestamp }}.json"
        else
          echo "Creating first release with custom notes"
          gh release create "${{ steps.version.outputs.tag_name }}" \
            --title "🚀 Framework v${{ steps.version.outputs.package_version }} (${{ steps.version.outputs.timestamp }})" \
            --notes-file release_notes.md \
            --target main \
            "${{ steps.package.outputs.package_file }}#express-kusto-framework-v${{ steps.version.outputs.package_version }}-${{ steps.version.outputs.timestamp }}.zip" \
            "${{ steps.mapfile.outputs.map_file }}#file-map-v${{ steps.version.outputs.package_version }}-${{ steps.version.outputs.timestamp }}.json"
        fi
        
        # 릴리즈 URL 가져오기
        RELEASE_URL=$(gh release view "${{ steps.version.outputs.tag_name }}" --json url --jq .url)
        echo "html_url=${RELEASE_URL}" >> $GITHUB_OUTPUT
    
    - name: Release Summary
      run: |
        echo "🎉 Release Created Successfully!"
        echo "📦 Release: ${{ steps.create_release.outputs.html_url }}"
        echo "🏷️ Tag: ${{ steps.version.outputs.tag_name }}"
        echo "📁 Package: ${{ steps.package.outputs.package_file }} (${{ steps.package.outputs.package_size }})"
        echo "📋 Map File: ${{ steps.mapfile.outputs.map_file }} (${{ steps.mapfile.outputs.file_count }} files)"
        echo "📊 Version: v${{ steps.version.outputs.package_version }}"
